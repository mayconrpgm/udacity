library(corrplot)
corrplot(cor(mtcars), type="upper", order="hclust", tl.col="black", tl.srt=45)
corrplot(cor(mtcars))
summary(mtcars)
help(mtcars)
hist(mtcars$mpg)
boxplot(mtcars$hp)
hist(mtcars$hp)
sd(1:5)
sd(c(1,2,5,6,7,3,9,12,19))
?sd
c<-c(1,2,5,6,7,3,9,12,19)
csd <- sd(c)
mc <- mean(c)
csd
mc
(c - mc)/csd
(c - mc)/csd > 2
(c - mc)/csd < -2
3+7+4
14/3
mean(c(1, 1000, 23, 27))
median(c(1, 1, 1, 1, 1, 11, 11, 11, 1, 1, 1, 1, 1, 1, 1, 11, 11, 11, 11, 11, 11, 2, 11, 11, 11))
sort(c(1, 1, 1, 1, 1, 11, 11, 11, 1, 1, 1, 1, 1, 1, 1, 11, 11, 11, 11, 11, 11, 2, 11, 11, 11))
hist(mtcars$mpg)
sd(mtcars$wt)
summary(mtcars$wt)
cor(mtcars$mpg, mtcars$wt)
plot(mtcars$mpg ~ mtcars$wt)
install.packages("rjson")
library("rjson")
json <- "https://api.cartolafc.globo.com/atletas/mercado"
j <- fromJSON(paste(readLines(json), collapse=""))
j
jog <- as.data.frame(j[[1]][[1]][c(1,2,4,5,6,7,8,9,10,11,12,13)])
for (i in 2:length(j[[1]])) {
jog_ret <- cbind(
as.data.frame(j[[1]][[i]][c(1,2,4,5,6,7,8,9,10,11,12,13)])
)
jog <- rbind(jog, jog_ret)
}
jog
head(jog)
jog$rodada_id
help(jog)
jog$jogos_num > 8
sum(jog$jogos_num > 8)
sum(jog$jogos_num > 5)
sum(jog$jogos_num > 8)
max(jog$media_num > 0)
jog2 <- jog[jog$media_num > 0]
jog2 <- jog[jog$media_num > 0,]
jog2
which.max(jog2$media_num)
jog2[223]
jog2[,223]
row(jog2, 255)
jog2
which.max(jog2$media_num)
jog[223,]
summary(jog2)
head(jog2)
head(jog)
head(jog2)
head(jog2$media_num)
head(jog2)
jog2$posicao_id
head(jog2)
head(jog2)
max(jog2$media_num)
which.max(jog2$media_num)
jog[223,]
?which.max
which.max(C(2,5,7))
max(C(2,5,7))
sum(C(2,5,7))
C(2,5,7)
C(2)
max(c(2,5,7))
which.max(c(2,5,7))
c(2,5,7)[3]
jog2$media_num[223]
jog2$nome[223]
jog2$posicao_id[223]
jog2[223,]
cor(jog2$variacao_num ~ jog2$media_num)
cor(jog2$variacao_num,jog2$media_num)
plot(jog2$variacao_num ~ jog2$media_num)
aggregate(media_num ~ clube_id, data = jog[jog$media_num>0,], mean)
aggregate(clube_id ~ media_num, data = jog[jog$media_num>0,], mean)
aggregate(media_num ~ clube_id, data = jog[jog$media_num>0,], mean)
?aggregate
class(jog)
aggregate(media_num, by, clube_id, data = jog[jog$media_num>0,], mean)
aggregate(jog2$media_num, by, jog2$clube_id, mean)
aggregate(jog2$media_num, by, jog2$clube_id)
aggregate(media_num ~ clube_id, data = jog[jog$media_num>0,], mean)
hist(jog2$clube_id)
sort(aggregate(media_num ~ clube_id, data = jog[jog$media_num>0,], mean))
?sort
clubes <- aggregate(media_num ~ clube_id, data = jog[jog$media_num>0,], mean)
order(clubes$media_num, decreasing = TRUE)
clubes[order(clubes$media_num, decreasing = TRUE),]
plot(jog$preco_num ~ jog$media_num)
savehistory("~/R-Files/history.Rhistory")
swirl()
swirl()
1:20
plot(1:20)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[0]}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
info()
submit()
submit()
submit()
play()
play()
paste("START", ..., "END")
paste("START", "END")
nxt()
submit()
submit()
telegram("da fuk")
submit()
mad_libs(place = "Sao Paulo", adjective="nice", noun = "banana")
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
play()
play()
dim(flags)
viewinfo(flags)
viewinfo()
nxt()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
mtcars
summary(mtcars)
?mtcars
plot(mtcars$mpg ~ mtcars$wt)
plot(sort(mtcars$wt))
plot(sort(log(mtcars$wt)))
write.csv(mtcars)
?write.csv
write.csv(mtcars, file = "mtcars.csv")
plot(mtcars$mpg ~ mtcars$wt)
lm(mtcars$mpg ~ mtcars$wt)
lm(mpg ~ wt, data = mtcars)
model <- lm(mpg ~ wt, data = mtcars)
summary(model)
str(mtcars)
model$residuals
sum(model$residuals)
sum(model$residuals ^ 2)
View(boring_function)
# Implement the logfact function below so that it computes the logarithm
# of the factorial of its input, i.e. log(n!).  To avoid overflow, you will
# want to use the fact that log(A*B) = log(A) + log(B).  You may use a while
# loop or recursion, and you use may use R's built-inlog function.
logfact = function(n){
return lfactorial(n)
}
# logfact(100) = 363.7394  # note: you may get a slightly different result
print (logfact(100))
# Implement the logfact function below so that it computes the logarithm
# of the factorial of its input, i.e. log(n!).  To avoid overflow, you will
# want to use the fact that log(A*B) = log(A) + log(B).  You may use a while
# loop or recursion, and you use may use R's built-inlog function.
logfact = function(n){
return lfactorial(n)
}
# logfact(100) = 363.7394  # note: you may get a slightly different result
print (logfact(100))
# Implement the logfact function below so that it computes the logarithm
# of the factorial of its input, i.e. log(n!).  To avoid overflow, you will
# want to use the fact that log(A*B) = log(A) + log(B).  You may use a while
# loop or recursion, and you use may use R's built-inlog function.
logfact = function(n) {
return lfactorial(n)
}
# logfact(100) = 363.7394  # note: you may get a slightly different result
print (logfact(100))
# Implement the logfact function below so that it computes the logarithm
# of the factorial of its input, i.e. log(n!).  To avoid overflow, you will
# want to use the fact that log(A*B) = log(A) + log(B).  You may use a while
# loop or recursion, and you use may use R's built-inlog function.
logfact = function(n) {
return lfactorial(n)
};
# logfact(100) = 363.7394  # note: you may get a slightly different result
print (logfact(100))
# Implement the logfact function below so that it computes the logarithm
# of the factorial of its input, i.e. log(n!).  To avoid overflow, you will
# want to use the fact that log(A*B) = log(A) + log(B).  You may use a while
# loop or recursion, and you use may use R's built-inlog function.
logfact = function(n) {
return lfactorial(n)
}
# logfact(100) = 363.7394  # note: you may get a slightly different result
print (logfact(100))
# Implement the logfact function below so that it computes the logarithm
# of the factorial of its input, i.e. log(n!).  To avoid overflow, you will
# want to use the fact that log(A*B) = log(A) + log(B).  You may use a while
# loop or recursion, and you use may use R's built-inlog function.
logfact = function(n) {
return 1
}
# logfact(100) = 363.7394  # note: you may get a slightly different result
print (logfact(100))
logfact = function(n) {
return lfactorial(n)
}
print (logfact(100))
logfact = function(n) {
return lfactorial(n)
}
print (logfact(100))
logfacts = function(n) {
return lfactorial(n)
}
print (logfact(100))
logfact = function(n) {
return lfactorial(n);
}
print (logfact(100))
logfact <- function(n)
{
return lfactorial(n);
}
print (logfact(100))
logfact <- function(n) {
return lfactorial(n);
}
print (logfact(100))
func = function(n) {
return n;
}
func(n)
View(plants)
func = function(n) {  return n;}
func(n)
func = function(n) {  return n;}
func(n)
func = function(n) {  return n;}
func = function(n) {  return n }
func = function(n) {  return n }
func = function(n) {
return n
func = function(n) {
return n }
func = function(n) {
return n;
func = function(n) {
if (n > 0) {
return n;
}
else {
return n + 1;
}
}
func(10)
func = function(n) {
if (n > 0) {
return n;
}
else {
return n + 1;
}
}
func(10)
func = function(n) {
if (n > 0) {
return n
}
else {
return n + 1
}
}
func(10)
func = function(n) {
if (n > 0) {
return n
}
else {
return n + 1
}
}
func(10)
func = function(n) {
if (n > 0) {
return n
}
else {
return n + 1
}
}
func(10)
func = function(n) {
if (n > 0) {
return(n)
}
else {
return(n + 1)
}
}
func(10)
setwd("D:/Projetos/udacity/Data Science/R")
data(diamonds)
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
data(diamonds)
str(diamonds)
str(diamonds$color)
diamonds$color
levels(diamonds$color)
?diamonds
summary(diamonds)
hist(diamonds$price)
summary(subset(diamonds,price < 500))
str(subset(diamonds,price < 500))
count(subset(diamonds,price < 500))
subset(diamonds,price < 500).count()
subset(diamonds,price < 500).count
subset(diamonds,price < 500).length()
subset(diamonds,price < 500)
nrow(subset(diamonds,price < 500))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
summary(cars)
library(ggplot2)
data(diamonds)
?diamonds
str(diamonds)
levels(diamonds$color)
summary(diamonds)
?diamonds
str(diamonds)
levels(diamonds$color)
summary(diamonds)
hist(diamonds$price)
nrow(subset(diamonds,price < 500))
nrow(subset(diamonds,price < 250))
nrow(subset(diamonds,price > 1500))
nrow(subset(diamonds,price < 500))
nrow(subset(diamonds,price < 250))
nrow(subset(diamonds,price > 15000))
nrow(subset(diamonds,price < 500))
nrow(subset(diamonds,price < 250))
nrow(subset(diamonds,price >= 15000))
qplot(x = price, data = diamonds)
qplot(x = price, data = diamonds, binwidth = 50) +
scale_x_continuous(limits = c(0, 5000), breaks = seq(0, 5000, 50))
qplot(x = price, data = diamonds, binwidth = 200) +
scale_x_continuous(limits = c(0, 5000), breaks = seq(0, 5000, 200))
qplot(x = price, data = diamonds, binwidth = 200) +
scale_x_continuous(limits = c(250, 5000), breaks = seq(250, 5000, 200))
qplot(x = price, data = diamonds, binwidth = 50) +
scale_x_continuous(limits = c(250, 1500), breaks = seq(250, 1500, 50))
qplot(x = price, data = diamonds, binwidth = 1) +
scale_x_continuous(limits = c(250, 1500), breaks = seq(250, 1500, 50))
50
qplot(x = price, data = diamonds, binwidth = 50) +
scale_x_continuous(limits = c(250, 1500), breaks = seq(250, 1500, 50))
qplot(x = price, data = diamonds) +
facet_wrap(~cut, ncol = 3)
ggsave('priceHistogram.png')
qplot(x = price, data = diamonds, binwidth = 50) +
scale_x_continuous(limits = c(250, 1500), breaks = seq(250, 1500, 50))
by(diamonds$price, diamonds$cut, 'min')
by(diamonds$price, diamonds$cut, 'summary')
by(diamonds$price, diamonds$cut, min)
by(diamonds$price, diamonds$cut, summary)
qplot(x = price, data = diamonds) +
facet_wrap(~cut, scales="free_y", ncol = 3)
View(diamonds)
qplot(x = price / carat, data = diamonds, binwidth = 30) +
scale_x_log10() +
facet_wrap(~cut, scales="free_y", ncol = 3)
qplot(x = price / carat, data = diamonds) +
scale_x_log10() +
facet_wrap(~cut, scales="free_y", ncol = 3)
qplot(x = price / carat, data = diamonds, binwidth = 200) +
scale_x_log10() +
facet_wrap(~cut, scales="free_y", ncol = 3)
qplot(x = price / carat, data = diamonds, binwidth = 50) +
scale_x_log10() +
facet_wrap(~cut, scales="free_y", ncol = 3)
qplot(x = price / carat, data = diamonds, binwidth = 1) +
scale_x_log10() +
facet_wrap(~cut, scales="free_y", ncol = 3)
qplot(x = price / carat, data = diamonds, binwidth = .1) +
scale_x_log10() +
facet_wrap(~cut, scales="free_y", ncol = 3)
qplot(x = price / carat, data = diamonds, binwidth = .05) +
scale_x_log10() +
facet_wrap(~cut, scales="free_y", ncol = 3)
qplot(x = color, y = price,
data = diamonds, geom = 'boxplot')
qplot(x = clarity, y = price,
data = diamonds, geom = 'boxplot')
qplot(x = clarity, y = price,
data = diamonds, geom = 'boxplot') +
coord_cartesian(ylim = c(0, 7500))
by(diamonds$price, diamonds$clarity, summary)
by(diamonds$price, diamonds$color, summary)
IQR(subset(diamonds, color = "D")$price)
summary(subset(diamonds, color = "D")$price)
IQR(subset(diamonds, color = "D")$price)
IQR(subset(diamonds, color = "D")$price)
IQR(subset(diamonds, color = "J")$price)
IQR(subset(diamonds, color == "D")$price)
IQR(subset(diamonds, color == "J")$price)
qplot(x = color, y = price / carat,
data = diamonds, geom = 'boxplot') +
coord_cartesian(ylim = c(0, 7500))
qplot(x = color, y = price / carat,
data = diamonds, geom = 'boxplot') +
coord_cartesian(ylim = c(0, 6000))
qplot(x = color, y = price,
data = diamonds, geom = 'boxplot') +
coord_cartesian(ylim = c(0, 6000))
/ carat
qplot(x = color, y = price / carat,
data = diamonds, geom = 'boxplot') +
coord_cartesian(ylim = c(0, 6000))
qplot(x = carat,
data = diamonds,
geom = 'freqpoly')
qplot(x = carat, data = diamonds, geom = 'freqpoly', binwidth = .1)
qplot(x = carat, data = diamonds, geom = 'freqpoly', binwidth = .1) +
scale_x_continuous(breaks = seq(0, 6, .1))
table(diamonds$carat)
margin.table(table(diamonds$carat))
margin.table(table(diamonds$carat), 1)
freq(diamonds$carat)
diamonds %>% freq(carat)
ftable(table(diamonds$carat))
margin.table(table(diamonds$carat), 1)
